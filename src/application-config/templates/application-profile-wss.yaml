{{ if .Values.enableStreaming }}
apiVersion: omniverse.nvidia.com/v1
kind: ApplicationProfile
metadata:
  name: azurelb
spec:
  name: AzureLB example profile
  description: Default profile - uses an AzureLB per stream
  supportedApplications:
    - name: usd-viewer
      versions:
        - '*'
  chartMappings:
    container: streamingKit.image.repository
    container_version: streamingKit.image.tag
    name: streamingKit.name
  chartValues:
    # global:
    #   imagePullSecrets:
    #     - name: regcred
    streamingKit:
      envoy:
        enabled: true
        secretRef: stream-tls-certificate
        config: |
          static_resources:
            listeners:
            - name: webrtc_signaling_listener
              address:
                socket_address:
                  address: 0.0.0.0
                  port_value: 49200
              filter_chains:
              - transport_socket:
                  name: envoy.transport_sockets.tls
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
                    common_tls_context:
                      tls_certificates:
                        - certificate_chain: { filename: "/etc/envoy/tls/tls.crt" }
                          private_key: { filename: "/etc/envoy/tls/tls.key" }
                filters:
                - name: envoy.filters.network.tcp_proxy
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                    stat_prefix: tcp
                    cluster: service_cluster
                    access_log:
                      - name: envoy.access_loggers.stream
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                          log_format:
                            text_format: "[%START_TIME%] \"%PROTOCOL%\" connection from %DOWNSTREAM_REMOTE_ADDRESS% to %UPSTREAM_HOST%\n"
            - name: health_listener
              address:
                socket_address:
                  address: 0.0.0.0
                  port_value: 8080
              filter_chains:
              - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: health_check
                    codec_type: AUTO
                    route_config:
                      name: local_route
                      virtual_hosts:
                      - name: local_service
                        domains: ["*"]
                        routes:
                        - match:
                            prefix: "/health"
                          direct_response:
                            status: 200
                            body:
                              inline_string: "OK"
                    http_filters:
                    - name: envoy.filters.http.router
            clusters:
            - name: service_cluster
              connect_timeout: 0.25s
              type: STATIC
              lb_policy: ROUND_ROBIN
              load_assignment:
                cluster_name: service_cluster
                endpoints:
                - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 49100  # Forwarding to the stream
        tls:
          enabled: true
          secretRef: stream-tls-certificate
      image:
        repository: nvcr.io/omniverse/prerel/usd-viewer
        pullPolicy: Always
        tag: 0.2.0
      sessionId: session_id
      service:
        signalingPort: 31000
        mediaPort: 31001
        healthPort: 31002
        annotations:
          # NLB configuration
          service.beta.kubernetes.io/azure-load-balancer-internal: "false"
          external-dns.alpha.kubernetes.io/ttl: "5"
          # Security stuff - may need to specify this in `loadBalancerSourceRanges`
          # service.beta.kubernetes.io/load-balancer-source-ranges: 216.228.125.128/30,216.228.127.128/30,206.223.160.26/32,216.228.125.131/32,216.228.125.128/30,216.228.127.128/30
          # Health check
          service.beta.kubernetes.io/port_8080_health-probe_protocol: HTTP
          service.beta.kubernetes.io/port_8080_health-probe_port: "8080"
          service.beta.kubernetes.io/port_8080_health-probe_request-path: /health
        type: LoadBalancer
      name: kit-app
      resources:
        limits:
          cpu: "3"
          memory: 20Gi
          nvidia.com/gpu: "1"
        requests:
          nvidia.com/gpu: "1"
      env:
        - name: USD_PATH
          value: /app/data/Forklift_A/Forklift_A01_PR_V_NVD_01.usd
{{- end -}}